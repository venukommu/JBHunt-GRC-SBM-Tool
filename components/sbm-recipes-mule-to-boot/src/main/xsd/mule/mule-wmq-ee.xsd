<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--

    (c) 2003-2010 MuleSoft, Inc. This software is protected under international copyright
    law. All use of this software is subject to MuleSoft's Master Subscription Agreement
    (or other master license agreement) separately entered into in writing between you and
    MuleSoft. If such an agreement is not in place, you may not use the software.

-->

<xsd:schema xmlns="http://www.mulesoft.org/schema/mule/ee/wmq"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesoft.org/schema/mule/core"
            xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
            xmlns:schemadoc="http://www.mulesoft.org/schema/mule/schemadoc"
            targetNamespace="http://www.mulesoft.org/schema/mule/ee/wmq"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/core"
                schemaLocation="./mule.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/jms"
                schemaLocation="./mule-jms.xsd"/>
     <xsd:import namespace = "http://www.mulesoft.org/schema/mule/schemadoc"
                schemaLocation = "./mule-schemadoc.xsd"/>

    <xsd:element name="xa-connector" type="wmqConnectorType" substitutionGroup="mule:abstract-shared-connector">
        <xsd:annotation>
            <xsd:documentation>
                The WebSphere MQ connector for XA transactions.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="connector" type="wmqConnectorType" substitutionGroup="mule:abstract-shared-connector">
        <xsd:annotation>
            <xsd:documentation>
                The default WebSphere MQ connector.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="wmqConnectorType">
        <xsd:complexContent>
            <xsd:extension base="jms:vendorJmsConnectorType">
                <xsd:attribute name="queueManager" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>The name of the QueueManager to use.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="hostName" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>The host name of the QueueManager to use.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="port" type="mule:substitutablePortNumber">
                    <xsd:annotation>
                        <xsd:documentation>The port of the QueueManager to use.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="temporaryModel" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The temporary destination model to use when creating temporary destinations from this connector.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="ccsId" type="mule:substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>The WebSphere MQ CCS ID.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="transportType">
                    <xsd:annotation>
                        <xsd:documentation>Whether to use a local binding or client/server TCP binding. Possible values are: BINDINGS_MQ, CLIENT_MQ_TCPIP, DIRECT_HTTP, DIRECT_TCPIP, and MQJD.
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:union>
                            <xsd:simpleType>
                                <xsd:restriction base="mule:propertyPlaceholderType"/>
                            </xsd:simpleType>
                            <xsd:simpleType>
                                <xsd:restriction base="xsd:NMTOKEN">
                                    <xsd:enumeration value="BINDINGS_MQ"/>
                                    <xsd:enumeration value="CLIENT_MQ_TCPIP"/>
                                    <xsd:enumeration value="DIRECT_HTTP"/>
                                    <xsd:enumeration value="DIRECT_TCPIP"/>
                                    <xsd:enumeration value="MQJD"/>
                                </xsd:restriction>
                            </xsd:simpleType>
                        </xsd:union>
                    </xsd:simpleType>
                </xsd:attribute>
                <xsd:attribute name="channel" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>The name of the channel used to communicate with the QueueManager.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="propagateMQEvents" type="mule:substitutableBoolean"/>
                <xsd:attribute name="useRemoteQueueDefinitions" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            When using remote queue definitions, WMQ uses the JMSReplyTo property to channel responses. When set to true this property will cause Mule to ignore ReplyTo queue destinations and not interfere with WMQ's remote queue mechanism. By default this is set to false. This also means that by using WMQ's remote queue definitions it is not possible to use some of Mule's request/response patterns when this properrty is true.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="receiveExitHandler" type="mule:substitutableClass">
                    <xsd:annotation>
                        <xsd:documentation>
                            The fully qualified class name of the receive exit handler implementation.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="receiveExitHandlerInit" type="mule:substitutableClass">
                    <xsd:annotation>
                        <xsd:documentation>
                            An initialization parameter for the receive exit handler.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="sendExitHandler" type="mule:substitutableClass">
                    <xsd:annotation>
                        <xsd:documentation>
                            The fully qualified class name of the send exit handler implementation.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="sendExitHandlerInit" type="mule:substitutableClass">
                    <xsd:annotation>
                        <xsd:documentation>
                            An initialization parameter for the send exit handler.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="securityExitHandler" type="mule:substitutableClass">
                    <xsd:annotation>
                        <xsd:documentation>
                            The fully qualified class name of the security exit handler implementation.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="securityExitHandlerInit" type="mule:substitutableClass">
                    <xsd:annotation>
                        <xsd:documentation>
                            An initialization parameter for the security exit handler.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="targetClient">
                    <xsd:annotation>
                        <xsd:documentation>
                            Specifies whether this is in JMS or non-JMS format. Possible values are: JMS_COMPLIANT or NONJMS_MQ (default).
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:union>
                            <xsd:simpleType>
                                <xsd:restriction base="mule:propertyPlaceholderType"/>
                            </xsd:simpleType>

                            <xsd:simpleType>
                                <xsd:restriction base="xsd:NMTOKEN">
                                    <xsd:enumeration value="NONJMS_MQ"/>
                                    <xsd:enumeration value="JMS_COMPLIANT"/>
                                </xsd:restriction>
                            </xsd:simpleType>
                        </xsd:union>
                    </xsd:simpleType>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="message-to-object-transformer" type="mule:abstractTransformerType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Converts a com.ibm.jms.JMSMessage or sub-type into an object by extracting the message payload.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="object-to-message-transformer" type="mule:abstractTransformerType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Converts an object back into a com.ibm.jms.JMSMessage.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="inbound-endpoint" type="inboundEndpointType" substitutionGroup="mule:abstract-inbound-endpoint">
        <xsd:annotation>
            <xsd:documentation>
                An endpoint on which WMQ messages are received.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="inboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractInboundEndpointType">
                <xsd:group ref="defaultEndpointElements" />
                <xsd:attributeGroup ref="mule:allExchangePatterns" />
                <xsd:attributeGroup ref="commonAddressAttributes" />
                <xsd:attributeGroup ref="mule:defaultEndpointAttributes" />
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="outbound-endpoint" type="outboundEndpointType" substitutionGroup="mule:abstract-outbound-endpoint">
        <xsd:annotation>
            <xsd:documentation>
                An endpoint to which WMQ messages are sent.
                </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="outboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractOutboundEndpointType">
                <xsd:group ref="defaultEndpointElements" />
                <xsd:attributeGroup ref="mule:allExchangePatterns" />
                <xsd:attributeGroup ref="commonAddressAttributes" />
                <xsd:attributeGroup ref="outboundAddressAttributes" />
                <xsd:attributeGroup ref="mule:defaultEndpointAttributes" />
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="endpoint" type="globalEndpointType" substitutionGroup="mule:abstract-global-endpoint">
        <xsd:annotation>
            <xsd:documentation>
                A global WMQ endpoint definition. Note that global endpoints are like endpoint factories from which new endpoints can be created. As such this endpoint has a union of inbound and outbound endpoint properties. Depending on how this endpoint is used the unneeded properties will ignored.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="globalEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractGlobalEndpointType">
                <xsd:group ref="defaultEndpointElements"/>
                <xsd:attributeGroup ref="mule:allExchangePatterns" />
                <xsd:attributeGroup ref="commonAddressAttributes"/>
                <xsd:attributeGroup ref="outboundAddressAttributes"/>
                <xsd:attributeGroup ref="mule:defaultEndpointAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:attributeGroup name="commonAddressAttributes">
            <xsd:attribute name="queue" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>
                        The queue name.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <!--<xsd:attribute name="topic" type="xsd:string">-->
                <!--<xsd:annotation>-->
                    <!--<xsd:documentation>-->
                        <!--The topic name. The "topic:" prefix will be added automatically. This attribute cannot be used with the queue attribute (the two are exclusive).-->
                    <!--</xsd:documentation>-->
                <!--</xsd:annotation>-->
            <!--</xsd:attribute>-->
    </xsd:attributeGroup>

    <xsd:attributeGroup name="outboundAddressAttributes">
        <xsd:attribute name="disableTemporaryReplyToDestinations" type="xsd:boolean">
            <xsd:annotation>
                <xsd:documentation>
                    If this is set to false (the default), when Mule performs request/response calls a temporary destination will automatically be set up to receive a response from the remote WMQ call.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="correlationId" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    A client can use the correlation ID header field to link one message to another. A typical use case is to link a response message with its request message. The CorrelationID must be a 24-byte String. WebSphere will pad shorter values with zeroes so that the fixed length is always 24 bytes. Because each message sent by a WMQ provider is assigned a message ID value, it is convenient to link messages via the message ID. All message ID values must start with the 'ID:' prefix.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="messageType">
            <xsd:annotation>
                <xsd:documentation>Indicates the message type. Each of the message types have specific behavior associated with them. The following message types are defined:
                    <ul>
                        <li>MQMT_REQUEST: The message requires a reply. Specify the name of the reply queue using the &lt;ReplyTo&gt; element of outbound routers. Mule handles the underlying configuration.</li>
                        <li>MQMT_DATAGRAM: The message does not require a reply.</li>
                        <li>MQMT_REPLY: The message is the reply to an earlier request message (MQMT_REQUEST). The message must be sent to the queue indicated by the &lt;ReplyTo&gt; configured on the outbound router. Mule automatically configures the request to control how to set the MessageId and CorrelationId of the reply. </li>
                        <li>MQMT_REPORT: The message is reporting on some expected or unexpected occurrence, usually related to some other message (for example, a request message was received that contained data that was not valid). Sends the message to the queue indicated by the &lt;ReplyTo&gt; configuration of the message descriptor of the original message.</li>
                    </ul>
                </xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:union>
                    <xsd:simpleType>
                        <xsd:restriction base="mule:propertyPlaceholderType"/>
                    </xsd:simpleType>
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:NMTOKEN">
                            <xsd:enumeration value="MQMT_REQUEST">
                                <xsd:annotation>
                                    <xsd:documentation>
                                        The message requires a reply. Specify the name of the reply queue using the &lt;ReplyTo&gt; element of outbound routers. Mule will handle the underlying configuration.
                                    </xsd:documentation>
                                </xsd:annotation>
                            </xsd:enumeration>
                            <xsd:enumeration value="MQMT_REPLY">
                                <xsd:annotation>
                                    <xsd:documentation>
                                        The message is the reply to an earlier request message (MQMT_REQUEST). The message must be sent to the queue indicated by the &lt;ReplyTo&gt; configured on the outbound router. Mule automatically configures the request to control how to set the MessageId and CorrelationId of the reply.
                                    </xsd:documentation>
                                </xsd:annotation>
                            </xsd:enumeration>
                            <xsd:enumeration value="MQMT_DATAGRAM">
                                <xsd:annotation>
                                    <xsd:documentation>
                                        The message is one that does not require a reply.
                                    </xsd:documentation>
                                </xsd:annotation>
                            </xsd:enumeration>
                            <xsd:enumeration value="MQMT_REPORT">
                                <xsd:annotation>
                                    <xsd:documentation>
                                        The message is reporting on some expected or unexpected occurrence, usually related to some other message (for example, a request message was received that contained data that was not valid). Send the message to the queue indicated by the &lt;ReplyTo&gt; configuration of the message descriptor of the original message.
                                    </xsd:documentation>
                                </xsd:annotation>
                            </xsd:enumeration>
                            <!-- Removed since we have not tested with MQE-->
                            <!--<xsd:enumeration value="MQMT_MQE_FIELDS_FROM_MQE"/>-->
                            <!--<xsd:enumeration value="MQMT_MQE_FIELDS"/>-->
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:union>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="characterSet" type="mule:substitutableInt">
            <xsd:annotation>
                <xsd:documentation>
                    If set, this property overrides the coded character set property of the destination queue or topic.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="persistentDelivery" type="mule:substitutableBoolean">
            <xsd:annotation>
                <xsd:documentation>
                    If set to true, the JMS provider logs the message to stable storage as it is sent so that it can be recovered if delivery is unsuccessful. A client marks a message as persistent if the application will have problems if the message is lost in transit. A client marks a message as non-persistent if an occasional lost message is tolerable. Clients use delivery mode to tell a JMS provider how to balance message transport reliability/throughput. Delivery mode only covers the transport of the message to its destination. Retention of a message at the destination until its receipt is acknowledged is not guaranteed by a PERSISTENT delivery mode. Clients should assume that message retention policies are set administratively. Message retention policy governs the reliability of message delivery from destination to message consumer. For example, if a client's message storage space is exhausted, some messages as defined by a site-specific message retention policy may be dropped. A message is guaranteed to be delivered once and only once by a JMS provider if the delivery mode of the message is persistent and if the destination has a sufficient message retention policy.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="timeToLive" type="mule:substitutableLong">
            <xsd:annotation>
                <xsd:documentation>
                    Define the default length of time in milliseconds from its dispatch time that a produced message should be retained by the message system. Time to live is set to zero (forever) by default.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="priority" type="substitutablePriorityNumber">
            <xsd:annotation>
                <xsd:documentation>
                    Sets the message priority. JMS defines a ten-level priority value with 0 as the lowest priority and 9 as the highest. In addition, clients should consider priorities 0-4 as gradations of normal priority and priorities 5-9 as gradations of expedited priority. JMS does not require that a provider strictly implement priority ordering of messages. However, it should do its best to deliver expedited messages ahead of normal messages.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="targetClient">
            <xsd:annotation>
                <xsd:documentation>
                    Specifies whether this is in JMS or non-JMS format. Possible values are: JMS_COMPLIANT or NONJMS_MQ (default).
                </xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:union>
                    <xsd:simpleType>
                        <xsd:restriction base="mule:propertyPlaceholderType"/>
                    </xsd:simpleType>

                    <xsd:simpleType>
                        <xsd:restriction base="xsd:NMTOKEN">
                            <xsd:enumeration value="NONJMS_MQ"/>
                            <xsd:enumeration value="JMS_COMPLIANT"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:union>
            </xsd:simpleType>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:element name="transaction" type="mule:baseTransactionType" substitutionGroup="mule:abstract-transaction">
        <xsd:annotation>
            <xsd:documentation>
                Transactions allow a series of operations to be grouped together so that they can be rolled back if a failure occurs. Set the action (such as ALWAYS_BEGIN or JOIN_IF_POSSIBLE) and the timeout setting for the transaction.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <!-- these include option/repeats - should be embedded once -->
    <!-- this is a modified version of what is in mule.xsd, allowing either a selector or a
         normal filter to be set -->
    <xsd:group name="defaultEndpointElements">
        <xsd:sequence>
            <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                <xsd:group ref="mule:endpointMessageProcessorElements" minOccurs="0" maxOccurs="unbounded"/>
                <xsd:element ref="mule:response" minOccurs="0"/>
                <xsd:element ref="mule:abstract-redelivery-policy" minOccurs="0"/>
                <xsd:element ref="mule:abstract-transaction" minOccurs="0"/>
                <xsd:element ref="mule:abstract-xa-transaction" minOccurs="0"/>
                <xsd:choice>
                    <xsd:element ref="mule:abstract-filter" minOccurs="0"/>
                    <xsd:element name="selector" type="selectorFilter" minOccurs="0"/>
                </xsd:choice>
                <xsd:element ref="mule:abstract-security-filter" minOccurs="0"/>
                <xsd:group ref="mule:propertiesGroup"/>
            </xsd:sequence>
        </xsd:sequence>
    </xsd:group>

    <xsd:element name="message-info-mapping" type="mule:abstractMessageInfoMappingType"
                 substitutionGroup="mule:abstract-message-info-mapping">
        <xsd:annotation>
            <xsd:documentation>
                Used for encoding IDs suitable for WebSphere's restrictive correlation mechanism.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="selectorFilter">
        <xsd:annotation>
            <xsd:documentation>
                Sets a selector on the underlying WMQ queue. It is not a standard Mule filter and cannot be combined with other filters.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="expression" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    The expression filter criteria to apply to the queue when consuming messages.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:simpleType name="substitutablePriorityNumber">
        <xsd:annotation>
            <xsd:documentation>
                A custom xsd:int type that also allows for Ant-style property placeholders and restricts the int value to a valid priority number.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="mule:propertyPlaceholderType"/>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="xsd:int">
                    <xsd:minInclusive value="0"/>
                    <xsd:maxInclusive value="9"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>
</xsd:schema>
